{"version":3,"sources":["pages/Weather.js","pages/Form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","Fragment","className","city","country","temp_celsius","temp_max","temp_min","description","Form","error","role","onSubmit","loadweather","type","name","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","state","undefined","icon","Math","floor","this","classname","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qUA+CeA,G,YA7CA,SAACC,GAER,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,UACb,6BACE,8DAGCF,EAAMG,MAAQH,EAAMI,SAClB,wCACH,kCAASJ,EAAMG,KAAf,KAAyBH,EAAMI,UAI7BJ,EAAMK,cACL,2CACC,kCAASL,EAAMK,aAAf,UAMFL,EAAMM,UAAY,+CAChB,kCAASN,EAAMM,SAAf,MAIFN,EAAMO,UAAY,+CAChB,kCAASP,EAAMO,SAAf,MAIFP,EAAMQ,aAAe,4CACnB,kCAASR,EAAMQ,YAAf,W,MCRLC,MA1BF,SAAAT,GACT,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,wBACb,wDACA,6BAAMF,EAAMU,MAgBtB,yBAAKR,UAAU,sBAAsBS,KAAK,SAA1C,iCAhBqC,MAC3B,0BAAMC,SAAUZ,EAAMa,aACpB,6BACE,2BAAQX,UAAU,cAAaY,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAErE,6BACE,2BAAOd,UAAU,cAAcY,KAAK,OAAOC,KAAK,UAAUC,YAAY,gBAExE,4BAAQd,UAAU,aAAlB,mBCsEDe,G,8DA3Ed,aAAc,IAAD,8BACT,gBAoBJC,WArBa,uCAqBA,WAAMC,GAAN,qBAAAC,EAAA,yDAEVD,EAAEE,iBAEIlB,EAAOgB,EAAEG,OAAOC,SAASpB,KAAKqB,MAC9BpB,EAAUe,EAAEG,OAAOC,SAASnB,QAAQoB,OAEvCrB,IAAMC,EAPC,iCAQeqB,MAAM,2DAAD,OACsBtB,EADtB,YAC8BC,EAD9B,kBAhClB,mCAgCkB,YARpB,cAQFsB,EARE,gBAWcA,EAASC,OAXvB,OAWHC,EAXG,OAYTC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZ5B,KAAK,GAAD,OAAIyB,EAASb,KAAb,YAAqBa,EAASI,IAAI5B,SAEtCA,QAAQwB,EAASI,IAAI5B,QACrB6B,QAAQ,EAAKC,WAAWN,EAASO,KAAKC,MACtC9B,SAAU,EAAK4B,WAAWN,EAASO,KAAK7B,UACxCC,SAAU,EAAK2B,WAAWN,EAASO,KAAK5B,UACxCC,YAAaoB,EAASS,QAAQ,GAAG7B,cApB1B,wBAwBX,EAAKuB,SAAS,CAACrB,OAAM,IAxBV,4CArBA,sDAET,EAAK4B,MAAM,CACPnC,UAAKoC,EACLnC,aAAQmC,EACRC,UAAKD,EACLJ,UAAKI,EACLN,aAAQM,EACRjC,cAASiC,EACThC,cAASgC,EACT/B,YAAa,GACbE,OAAM,GAXD,E,uDAeF0B,GAER,OADWK,KAAKC,MAAMN,EAAO,U,+BAkC7B,OACI,yBAAKlC,UAAU,UACV,yBAAKA,UAAU,aACf,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACf,kBAAC,EAAD,CAAMW,YAAa8B,KAAKzB,WAAWR,MAAOiC,KAAKL,MAAM5B,SAG3D,kBAAC,EAAD,CAASkC,UAAU,cAClBzC,KAAMwC,KAAKL,MAAMnC,KACjBC,QAASuC,KAAKL,MAAMlC,QACpBC,aAAcsC,KAAKL,MAAML,QACzB3B,SAAUqC,KAAKL,MAAMhC,SACrBC,SAAUoC,KAAKL,MAAM/B,SACrBC,YAAamC,KAAKL,MAAM9B,qB,GAjElBqC,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLmB,QAAQnB,MAAMA,EAAMsD,c","file":"static/js/main.d3d11b09.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Weather.css';\r\nconst Weather =(props)=> { \r\n    \r\n        return(\r\n          <React.Fragment>\r\n            <div className=\"result\">\r\n              <div>\r\n                <h1>Your Query will appear below :</h1>\r\n                \r\n                {\t\r\n\t \t              props.city && props.country && \r\n                   <p> Location: \r\n\t \t            \t<span> { props.city }, { props.country }</span>\r\n\t \t              </p> \r\n\t              }\r\n            \t { \t\r\n                  props.temp_celsius &&\r\n                   <p> Temperature: \r\n                    <span> { props.temp_celsius }&deg;\t</span>\r\n                  </p> \r\n                  \r\n                }\r\n                \r\n                { \t\r\n                  props.temp_max && <p> Max Temparature: \r\n                    <span> { props.temp_max } </span>\r\n                  </p> \r\n                }\r\n                 { \t\r\n                  props.temp_min && <p> Min Temparature: \r\n                    <span> { props.temp_min } </span>\r\n                  </p> \r\n                }\r\n                 { \t\r\n                  props.description && <p> Weather Type: \r\n                    <span> { props.description } </span>\r\n                  </p> \r\n                }\r\n                \r\n              </div> \r\n            </div>\r\n           \r\n  \r\n </React.Fragment>\r\n       )\r\n}\r\nexport default Weather;\r\n/*\r\nfunction maxminTemp(min, max) {\r\n  if (max && min) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n*/","import React from 'react'\r\nimport './Form.css';\r\nconst Form = props=>{\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"controller col-sm-14\" >\r\n              <p>How is the weather today!</p>\r\n              <div>{props.error? error():null}</div>\r\n              <form onSubmit={props.loadweather}>\r\n                <div>\r\n                  <input  className=\"input-style\"type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n                </div>\r\n                <div >\r\n                  <input className=\"input-style\" type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n                </div>\r\n                <button className=\"btn-style\" >Get Weather</button>\r\n              </form>  \r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\nfunction error(){\r\n  return(\r\n    <div className=\"alert alert-danger \" role=\"alert\">\r\n      Please enter City and Country\r\n    </div>\r\n  )\r\n}\r\nexport default Form;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Weather from \"./pages/Weather\";\r\nimport Form from \"./pages/Form\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"weather-icons/css/weather-icons.css\";\r\n\r\nconst Api_Key = \"1e34a48b9784b09c5dfcf61e5cc47e6b\";\r\n\r\nclass App extends React.Component {\r\n constructor(){\r\n     super();\r\n     this.state={\r\n         city:undefined,\r\n         country:undefined,\r\n         icon:undefined,\r\n         main:undefined,\r\n         celsius:undefined,\r\n         temp_max:undefined,\r\n         temp_min:undefined,\r\n         description: \"\",\r\n         error:true\r\n     };\r\n }\r\n\r\n calCelsius(temp) {\r\n    let cell = Math.floor(temp - 273.15);\r\n    return cell;\r\n  }\r\n\r\n  \r\n getWeather = async(e)=>{ \r\n   \r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    if(city&&country){\r\n      const api_call = await fetch(`\r\n     http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}\r\n     `);\r\n     const response = await api_call.json();\r\n     console.log(response);\r\n     this.setState({\r\n       city:`${response.name},${response.sys.country}`,\r\n       //city:response.name,\r\n       country:response.sys.country,\r\n       celsius:this.calCelsius(response.main.temp),\r\n       temp_max: this.calCelsius(response.main.temp_max),\r\n       temp_min: this.calCelsius(response.main.temp_min),\r\n       description: response.weather[0].description,\r\n     });\r\n   \r\n }else{\r\n   this.setState({error:true})\r\n }\r\n    \r\n };\r\n  render() {\r\n    return (\r\n        <div className=\"banner\">\r\n             <div className=\"container\">\r\n             <div className=\"app\">\r\n                 <div className=\"form-part\">\r\n                 <Form loadweather={this.getWeather}error={this.state.error}/>\r\n                 </div>\r\n           \r\n           <Weather classname=\"result-part\"\r\n            city={this.state.city} \r\n            country={this.state.country}\r\n            temp_celsius={this.state.celsius}\r\n            temp_max={this.state.temp_max}\r\n            temp_min={this.state.temp_min}\r\n            description={this.state.description}\r\n           />\r\n       </div>\r\n        </div>\r\n        </div>\r\n       \r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}